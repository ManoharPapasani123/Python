Pandas is an open-source, BSD-licensed Python library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language. 
Python with Pandas is used in a wide range of fields including academic and commercial domains including finance, economics, Statistics, analytics, etc.In this tutorial, we will learn the various features of Python Pandas and how to use them in practice.

Prior to Pandas, Python was majorly used for data munging and preparation. It had very little contribution towards data analysis. Pandas solved this problem. Using Pandas, we can accomplish five typical steps in the processing and analysis of data, regardless of the origin of data — load, prepare, manipulate, model, and analyze.

Python with Pandas is used in a wide range of fields including academic and commercial domains including finance, economics, Statistics, analytics, etc.

Key Features of Pandas

Fast and efficient DataFrame object with default and customized indexing.
Tools for loading data into in-memory data objects from different file formats.
Data alignment and integrated handling of missing data.
Reshaping and pivoting of date sets.
Label-based slicing, indexing and subsetting of large data sets.
Columns from a data structure can be deleted or inserted.
Group by data for aggregation and transformations.
High performance merging and joining of data.
Time Series functionality.


Pandas deals with the following three data structures 

Series
DataFrame
Panel


DataStructure	Dimensions	 Description

Series		1D               labeled homogeneous array, sizeimmutable.
Data Frames	2	         General 2D labeled, size-mutable tabular structure with                                   potentially heterogeneously typed columns.
Panel	        3	         General 3D labeled, size-mutable array.

A pandas Series can be created using the following constructor 

pandas.Series( data, index, dtype, copy)
The parameters of the constructor are as follows 


1	
data

data takes various forms like ndarray, list, constants

2	
index

Index values must be unique and hashable, same length as data. Default np.arrange(n) if no index is passed.

3	
dtype

dtype is for data type. If None, data type will be inferred

4	
copy
Copy data. Default False

A series can be created using various inputs like 

Array
Dict
Scalar value or constants


Create an Empty Series
A basic series, which can be created is an Empty Series.

ex 1)

#import the pandas library and aliasing as pd
import pandas as pd
s = pd.Series()
print s

Create a Series from ndarray
If data is an ndarray, then index passed must be of the same length. If no index is passed, then by default index will be range(n) where n is array length, i.e., [0,1,2,3…. range(len(array))-1].

ex 2)
#import the pandas library and aliasing as pd
import pandas as pd
import numpy as np
data = np.array(['a','b','c','d'])
s = pd.Series(data)
print s


ex 3)
#import the pandas library and aliasing as pd
import pandas as pd
import numpy as np
data = np.array(['a','b','c','d'])
s = pd.Series(data,index=[100,101,102,103])
print s

Create a Series from dict
A dict can be passed as input and if no index is specified, then the dictionary keys are taken in a sorted order to construct index. If index is passed, the values in data corresponding to the labels in the index will be pulled out.

ex 4)
#import the pandas library and aliasing as pd
import pandas as pd
import numpy as np
data = {'a' : 0., 'b' : 1., 'c' : 2.}
s = pd.Series(data)
print s

ex 5)
Create a Series from Scalar
If data is a scalar value, an index must be provided. The value will be repeated to match the length of index

#import the pandas library and aliasing as pd
import pandas as pd
import numpy as np
s = pd.Series(5, index=[0, 1, 2, 3])
print s

ex6)
Accessing Data from Series with Position
Data in the series can be accessed similar to that in an ndarray

ex 1)
Retrieve the first element. As we already know, the counting starts from zero for the array, which means the first element is stored at zeroth position and so on.

import pandas as pd
s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

#retrieve the first element
print s[0]


ex 7)
import pandas as pd
s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

#retrieve the first three element
print s[:3]

ex 8)
import pandas as pd
s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

#retrieve the last three element
print s[-3:]


ex 9)
Retrieve Data Using Label (Index)
A Series is like a fixed-size dict in that you can get and set values by index label.

Example 1
Retrieve a single element using index label value.

import pandas as pd
s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

#retrieve a single element
print s['a']


ex 10)

Example 2
Retrieve multiple elements using a list of index label values.

import pandas as pd
s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

#retrieve multiple elements
print s[['a','c','d']]

ex 11)
If a label is not contained, an exception is raised.

import pandas as pd
s = pd.Series([1,2,3,4,5],index = ['a','b','c','d','e'])

#retrieve multiple elements
print s['f']



A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns.

Features of DataFrame
Potentially columns are of different types
Size – Mutable
Labeled axes (rows and columns)
Can Perform Arithmetic operations on rows and columns


pandas.DataFrame
A pandas DataFrame can be created using the following constructor 

pandas.DataFrame( data, index, columns, dtype, copy)
The parameters of the constructor are as follows 

S.No	Parameter & Description
1	
data

data takes various forms like ndarray, series, map, lists, dict, constants and also another DataFrame.

2	
index

For the row labels, the Index to be used for the resulting frame is Optional Default np.arrange(n) if no index is passed.

3	
columns

For column labels, the optional default syntax is - np.arrange(n). This is only true if no index is passed.

4	
dtype

Data type of each column.

4	
copy

This command (or whatever it is) is used for copying of data, if the default is False.


Create DataFrame
A pandas DataFrame can be created using various inputs like 

Lists
dict
Series
Numpy ndarrays
Another DataFrame
In the subsequent sections of this chapter, we will see how to create a DataFrame using these inputs.


Create an Empty DataFrame
A basic DataFrame, which can be created is an Empty Dataframe.

Example
#import the pandas library and aliasing as pd
import pandas as pd
df = pd.DataFrame()
print df

Create a DataFrame from Lists
The DataFrame can be created using a single list or a list of lists.

Example 1
import pandas as pd
data = [1,2,3,4,5]
df = pd.DataFrame(data)
print df

Example 2
import pandas as pd
data = [['Alex',10],['Bob',12],['Clarke',13]]
df = pd.DataFrame(data,columns=['Name','Age'])
print df

Example 3
import pandas as pd
data = [['Alex',10],['Bob',12],['Clarke',13]]
df = pd.DataFrame(data,columns=['Name','Age'],dtype=float)
print df

Create a DataFrame from Dict of ndarrays / Lists

Example 1
import pandas as pd
data = {'Name':['Tom', 'Jack', 'Steve', 'Ricky'],'Age':[28,34,29,42]}
df = pd.DataFrame(data)
print df


example2

import pandas as pd
data = {'Name':['Tom', 'Jack', 'Steve', 'Ricky'],'Age':[28,34,29,42]}
df = pd.DataFrame(data, index=['rank1','rank2','rank3','rank4'])
print df



Example 1
The following example shows how to create a DataFrame by passing a list of dictionaries.

import pandas as pd
data = [{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]
df = pd.DataFrame(data)
print df


import pandas as pd
data = [{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]
df = pd.DataFrame(data, index=['first', 'second'])
print df

import pandas as pd
data = [{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]

#With two column indices, values same as dictionary keys
df1 = pd.DataFrame(data, index=['first', 'second'], columns=['a', 'b'])

#With two column indices with one index with other name
df2 = pd.DataFrame(data, index=['first', 'second'], columns=['a', 'b1'])
print df1
print df2

Create a DataFrame from Dict of Series
Dictionary of Series can be passed to form a DataFrame. The resultant index is the union of all the series indexes passed.

Example
import pandas as pd

d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']),
      'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

df = pd.DataFrame(d)
print df


Column Selection
We will understand this by selecting a column from the DataFrame.

Example
import pandas as pd

d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']),
      'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

df = pd.DataFrame(d)
print df ['one']



import pandas as pd

d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']),
      'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

df = pd.DataFrame(d)

# Adding a new column to an existing DataFrame object with column label by passing new series

print ("Adding a new column by passing as Series:")
df['three']=pd.Series([10,20,30],index=['a','b','c'])
print df

print ("Adding a new column using the existing columns in DataFrame:")
df['four']=df['one']+df['three']

print df



Example
# Using the previous DataFrame, we will delete a column
# using del function
import pandas as pd

d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
     'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd']), 
     'three' : pd.Series([10,20,30], index=['a','b','c'])}

df = pd.DataFrame(d)
print ("Our dataframe is:")
print df

# using del function
print ("Deleting the first column using DEL function:")
del df['one']
print df

# using pop function
print ("Deleting another column using POP function:")
df.pop('two')
print df


Selection by Label
Rows can be selected by passing row label to a loc function.
import pandas as pd

d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
     'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

df = pd.DataFrame(d)
print df.loc['b']


Selection by integer location
Rows can be selected by passing integer location to an iloc function.

import pandas as pd

d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']),
     'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

df = pd.DataFrame(d)
print df.iloc[2]


Slice Rows
Multiple rows can be selected using ‘ : ’ operator.

import pandas as pd

d = {'one' : pd.Series([1, 2, 3], index=['a', 'b', 'c']), 
    'two' : pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}

df = pd.DataFrame(d)
print df[2:4]


Addition of Rows
Add new rows to a DataFrame using the append function. This function will append the rows at the end.

import pandas as pd

df = pd.DataFrame([[1, 2], [3, 4]], columns = ['a','b'])
df2 = pd.DataFrame([[5, 6], [7, 8]], columns = ['a','b'])

df = df.append(df2)
print df

Deletion of Rows
Use index label to delete or drop rows from a DataFrame. If label is duplicated, then multiple rows will be dropped.

If you observe, in the above example, the labels are duplicate. Let us drop a label and will see how many rows will get dropped.

import pandas as pd

df = pd.DataFrame([[1, 2], [3, 4]], columns = ['a','b'])
df2 = pd.DataFrame([[5, 6], [7, 8]], columns = ['a','b'])

df = df.append(df2)

# Drop rows with label 0
df = df.drop(0)

print df

A panel is a 3D container of data. The term Panel data is derived from econometrics and is partially responsible for the name pandas  pan(el) da(ta)s.

The names for the 3 axes are intended to give some semantic meaning to describing operations involving panel data. They are 

items  axis 0, each item corresponds to a DataFrame contained inside.

major_axis  axis 1, it is the index (rows) of each of the DataFrames.

minor_axis  axis 2, it is the columns of each of the DataFrames.


pandas.Panel()
A Panel can be created using the following constructor 

pandas.Panel(data, items, major_axis, minor_axis, dtype, copy)
The parameters of the constructor are as follows 

data	
Data takes various forms like ndarray, series, map, lists, dict, constants and also another DataFrame
items	axis=0
major_axis	axis=1
minor_axis	axis=2
dtype	
Data type of each column
copy	
Copy data. Default, false

Create Panel
A Panel can be created using multiple ways like 

From ndarrays
From dict of DataFrames
From 3D ndarray
# creating an empty panel
import pandas as pd
import numpy as np

data = np.random.rand(2,4,5)
p = pd.Panel(data)
print p

From dict of DataFrame Objects
#creating an empty panel
import pandas as pd
import numpy as np

data = {'Item1' : pd.DataFrame(np.random.randn(4, 3)), 
        'Item2' : pd.DataFrame(np.random.randn(4, 2))}
p = pd.Panel(data)
print p

Create an Empty Panel
An empty panel can be created using the Panel constructor as follows 

#creating an empty panel
import pandas as pd
p = pd.Panel()
print p

Selecting the Data from Panel
Select the data from the panel using 
Items
Major_axis
Minor_axis
Using Items
# creating an empty panel
import pandas as pd
import numpy as np
data = {'Item1' : pd.DataFrame(np.random.randn(4, 3)), 
        'Item2' : pd.DataFrame(np.random.randn(4, 2))}
p = pd.Panel(data)
print p['Item1']

Using major_axis
Data can be accessed using the method panel.major_axis(index).

# creating an empty panel
import pandas as pd
import numpy as np
data = {'Item1' : pd.DataFrame(np.random.randn(4, 3)), 
        'Item2' : pd.DataFrame(np.random.randn(4, 2))}
p = pd.Panel(data)
print p.major_xs(1)

Using minor_axis
Data can be accessed using the method panel.minor_axis(index).

# creating an empty panel
import pandas as pd
import numpy as np
data = {'Item1' : pd.DataFrame(np.random.randn(4, 3)), 
        'Item2' : pd.DataFrame(np.random.randn(4, 2))}
p = pd.Panel(data)
print p.minor_xs(1)


How to read data from file using Pandas
---------------------------------------
Ex 1)
import pandas as pd   

orders = pd.read_table('chipotle.tsv')
orders.head()

Ex 2)
import pandas as pd

user_cols = ['user_id', 'age', 'gendar', 'occupation', 'zip_code']
movies = pd.read_table('movieusers.csv', sep='|', header=None, names=user_cols)
movies.head()

How to select series from a Dataframe
-------------------------------------

Ex 3)
import pandas as pd

ufo = pd.read_csv('ufo.csv')

ufo.head()

type(ufo)

type(ufo['City'])

ufo.shape

ufo['Location'] = ufo.City +','+ ufo.State

ufo.head()


What is the difference between method and attribute
---------------------------------------------------
Ex 4)
import pandas as pd

movies = pd.read_csv('imdb_1000.csv')

movies.head()

movies.describe()

movies.shape

movies.dtypes

movies.describe(include=['object'])

How to rename the columns in Pandas
-----------------------------------
Ex 5)
import pandas as pd

ufo = pd.read_csv('ufo.csv')
ufo.head()

Approch-1
ufo.columns

ufo.rename(columns = {'Colors Reported':'Colors_Reported','Shape Reported':'Shape_Reported'}, inplace=True)

ufo.head()

Approch-2
ufo_cols = ['city', 'colors reported', 'shape reported', 'state', 'time']
ufo.columns = ufo_cols

ufo.head()

Approch-3
import pandas as pd

 ufo = pd.read_csv('ufo.csv', names=ufo_cols, header=0)

ufo.head()

ufo.columns

ufo.columns = ufo.columns.str.replace(' ','-')

ufo.head()

How to remove column or row in pandas dataframe
-----------------------------------------------
Ex 6)
import pandas as pd

ufo = pd.read_csv('ufo.csv')

ufo.drop('Colors Reported', axis=1, inplace=True)

ufo.head()

Ex 7)
import pandas as pd

ufo = pd.read_csv('ufo.csv')

ufo.drop(['City','State'], axis=1, inplace=True)

ufo.head()

Ex 8)
import pandas as pd

ufo = pd.read_csv('ufo.csv')

ufo.drop([0,1], axis=0, inplace=True)

ufo.head()

(or)

import pandas as pd

ufo = pd.read_csv('ufo.csv')

ufo.drop([0,1], inplace=True) (//axis = 0 is default value)

ufo.head()

How to sort the Dataframe and Series in Pandas
----------------------------------------------
Ex 9)
import pandas as pd

movies = pd.read_csv('imdb_1000.csv')

New Approch(Pandas 1.7+)
movies.title.sort_values(ascending=False)

movies.sort_values('title', ascending=False)

movies.sort_values(['content_rating','duration'])

Old Approch(Pandas >1.7)
movies.title.order(ascending=False)

movies.sort('title', ascending=False)

How to Filter the data in Pandas
--------------------------------
Ex 10)
import pandas as pd

movies = pd.read_csv('imdb_1000.csv')

movies.head()

Approch-1
---------
booleans = []

step-1
for length in movies['duration']:
    if length >= 200:
        booleans.append(True)
    else:
        booleans.append(False)
        
booleans[0:10]

step-2
is_long = pd.Series(booleans)
is_long.head()

step-3
movies[is_long]

Approch-2
is_long = movies.duration >= 200
is_long.head()

Approch-3
movies[movies.duration >= 200]

(or)

movies[movies.duration >= 200]['genre']

(or)

movies.loc[movies.duration >= 200,'genre']

How to filter multiple series values in pandas
----------------------------------------------
Ex 11)
import pandas as pd

movies = pd.read_csv('imdb_1000.csv')

movies.head()

#movies[(movies.duration >= 200) & (movies.genre == 'Drama')]

#movies[(movies.duration >= 200) | (movies.genre == 'Drama')]

#(movies.duration >= 200) & (movies.genre == 'Drama')

(movies.duration >= 200) | (movies.genre == 'Drama')

How to select few columns from csv file using pandas
----------------------------------------------------
Ex 12)
import pandas as pd

ufo = pd.read_csv('ufo.csv', usecols=[0,4])

ufo.head()

(or)

import pandas as pd

ufo = pd.read_csv('ufo.csv',usecols=['City','State'])

ufo.head()

How to iterate series in pandas dataframe
-----------------------------------------
Ex 13)
import pandas as pd

ufo = pd.read_csv('ufo.csv')

for c in ufo.City:
    print(c)

How to iterate pandas dataframe
-------------------------------
Ex 14)
import pandas as pd

ufo = pd.read_csv('ufo.csv')

for index, row in ufo.iterrows():
    print(index, row.City, row.State)

How to filter numeric datatypes in pandas
-----------------------------------------
Ex 15)
import pandas as pd

drinks = pd.read_csv('drinks.csv')
drinks.dtypes

import numpy as np
drinks.select_dtypes(include=[np.number]).dtypes

How to get all stats of describe()
----------------------------------
Ex 16)
import pandas as pd

drinks = pd.read_csv('drinks.csv')
drinks.dtypes

drinks.describe(include= 'all')

(or)

drinks.describe(include= ['object','float64'])

How to use axis parameter in Pandas
-----------------------------------
Ex 17)
import pandas as pd

drinks = pd.read_csv('drinks.csv')

#drinks.head()

drinks.drop('continent', axis=1).head()

Ex 18)
import pandas as pd

drinks = pd.read_csv('drinks.csv')

#drinks.head()

drinks.drop(2, axis=0).head()

Ex 19)
import pandas as pd

drinks = pd.read_csv('drinks.csv')

#drinks.head()

drinks.mean(axis = 'index').head()


Ex 20)
import pandas as pd

drinks = pd.read_csv('drinks.csv')

#drinks.head()

drinks.mean(axis = 'columns').head()

How to use string methods in Pandas
------------------------------------
Ex 21)
import pandas as pd

orders = pd.read_table('chipotle.tsv')

#orders.head()

orders.item_name.str.upper()

Ex 22)
import pandas as pd

orders = pd.read_table('chipotle.tsv')

#orders.head()

orders[orders.item_name.str.contains('Chicken')]

Ex 23)
import pandas as pd

orders = pd.read_table('chipotle.tsv')

#orders.head()

orders.choice_description.str.replace('[','').head()

Ex 24)
import pandas as pd

orders = pd.read_table('chipotle.tsv')

#orders.head()

orders.choice_description.str.replace(']','').head()

Ex 25)
import pandas as pd

orders = pd.read_table('chipotle.tsv')

#orders.head()

orders.choice_description.str.replace('[','').str.replace(']','').head()

Ex 26)
import pandas as pd

orders = pd.read_table('chipotle.tsv')

#orders.head()

orders.choice_description.str.replace('[\[\]]', '').head()

How to change datatype of series in Pandas
------------------------------------------
Ex 27)
drinks['beer_servings'] = drinks.beer_servings.astype(float)

drinks.dtypes

Ex 28)
drinks = pd.read_csv('drinks.csv', dtype={'beer_servings':float})

drinks.dtypes

Ex 29)
import pandas as pd

orders = pd.read_table('chipotle.tsv')

#orders.head()

orders.item_price.str.replace('$','').astype(float).mean()

Ex 30)
import pandas as pd

orders = pd.read_table('chipotle.tsv')

#orders.head()

orders.item_name.str.contains('Chicken').astype(int).head()

How to use group by in Pandas
-----------------------------
Ex 31)
import pandas as pd

drinks = pd.read_csv('drinks.csv')

#drinks.head()

drinks.beer_servings.mean()

drinks.head()

drinks.groupby('continent').beer_servings.mean()

drinks.groupby('continent').beer_servings.agg(['min','max','count','mean'])

%matplotlib inline
drinks.groupby('continent').mean().plot(kind='bar')

How to explore Pandas series
----------------------------
Ex 32)
import pandas as pd

movies = pd.read_csv('imdb_1000.csv')

movies.head()

movies.dtypes

movies.genre.describe()

movies.genre.value_counts()

movies.genre.value_counts(normalize=True)

type(movies.genre.value_counts())

movies.genre.value_counts().head()

movies.genre.unique()

movies.genre.nunique()

pd.crosstab(movies.genre, movies.content_rating)

movies.duration.describe()

movies.duration.mean()

movies.duration.value_counts().head()

%matplotlib inline
movies.duration.plot(kind='hist')

movies.genre.value_counts().plot(kind='bar')

How to handle missing values in pandas
---------------------------------------
Ex 33)
import pandas as pd

ufo = pd.read_csv('ufo.csv')

ufo.tail()

ufo.isnull().tail()

ufo.notnull().tail()

ufo.isnull().sum()

ufo[ufo.City.isnull()].head()

ufo.shape

ufo.dropna(how='any').shape

ufo.shape

ufo.dropna(how='all').shape

ufo.dropna(subset=['City', 'Shape Reported'], how='any').shape

ufo.dropna(subset=['City', 'Shape Reported'], how='all').shape

ufo['Shape Reported'].value_counts().head()

ufo['Shape Reported'].value_counts(dropna=False).head()

ufo['Shape Reported'].fillna(value='VARIOUS', inplace=True)

ufo['Shape Reported'].value_counts().head()

How do I select multiple rows and columns from a pandas DataFrame
--------------------------------------------------------
Ex 34)
import pandas as pd

ufo = pd.read_csv('ufo.csv')

ufo.head(3)

loc method
----------
The loc method is used to select rows and columns by label. You can pass it:

A single label
A list of labels
A slice of labels
A boolean Series
A colon (which indicates "all labels")


# row 0, all columns
ufo.loc[0, :]

# rows 0 and 1 and 2, all columns
ufo.loc[[0, 1, 2], :]


# rows 0 through 2 (inclusive), all columns
ufo.loc[0:2, :]

:
# this implies "all columns", but explicitly stating "all columns" is better
ufo.loc[0:2]

# rows 0 through 2 (inclusive), column 'City'
ufo.loc[0:2, 'City']

# rows 0 through 2 (inclusive), columns 'City' and 'State'
ufo.loc[0:2, ['City', 'State']]

# rows 0 through 2 (inclusive), columns 'City' through 'State' (inclusive)
ufo.loc[0:2, 'City':'State']

# accomplish the same thing using 'head' and 'drop'
ufo.head(3).drop('Time', axis=1)


# rows in which the 'City' is 'Oakland', column 'State'
ufo.loc[ufo.City=='Oakland', 'State']


iloc method
-----------
The iloc method is used to select rows and columns by integer position. You can pass it:

A single integer position
A list of integer positions
A slice of integer positions
A colon (which indicates "all integer positions")

# rows in positions 0 and 1, columns in positions 0 and 3
ufo.iloc[[0, 1], [0, 3]]

# rows in positions 0 through 2 (exclusive), columns in positions 0 through 4 (exclusive)
ufo.iloc[0:2, 0:4]

# rows in positions 0 through 2 (exclusive), all columns
ufo.iloc[0:2, :]

Ex 35)
import pandas as pd

drinks = pd.read_csv('drinks.csv', index_col='country')

drinks.head()


# row with label 'Albania', column in position 0
drinks.ix['Albania', 0]

# row in position 1, column with label 'beer_servings'
drinks.ix[1, 'beer_servings']

Rules for using numbers with ix:

If the index is strings, numbers are treated as integer positions, and thus slices are exclusive on the right.

If the index is integers, numbers are treated as labels, and thus slices are inclusive.

# rows 'Albania' through 'Andorra' (inclusive), columns in positions 0 through 2 (exclusive)
drinks.ix['Albania':'Andorra', 0:2]

# rows 0 through 2 (inclusive), columns in positions 0 through 2 (exclusive)
ufo.ix[0:2, 0:2]

Inplace parameter in Pandas
---------------------------
Ex 36)
import pandas as pd

ufo = pd.read_csv('ufo.csv')

ufo.head()

ufo.shape

# remove the 'City' column (doesn't affect the DataFrame since inplace=False)
ufo.drop('City', axis=1).head()


# confirm that the 'City' column was not actually removed
ufo.head()

# remove the 'City' column (does affect the DataFrame since inplace=True)
ufo.drop('City', axis=1, inplace=True)


# confirm that the 'City' column was actually removed
ufo.head()

How to create dummy or indicator varaibles in Pandas
----------------------------------------------------
Ex 37)
import pandas as pd

# read the training dataset from Kaggle's Titanic competition
train = pd.read_csv('kaggletrain.csv')

train.head()


# create the 'Sex_male' dummy variable using the 'map' method
train['Sex_male'] = train.Sex.map({'female':0, 'male':1})

train.head()

# alternative: use 'get_dummies' to create one column for every possible value
pd.get_dummies(train.Sex).head()


Generally speaking:

If you have "K" possible values for a categorical feature, you only need "K-1" dummy variables to capture all of the information about that feature.
One convention is to drop the first dummy variable, which defines that level as the "baseline".

# drop the first dummy variable ('female') using the 'iloc' method
pd.get_dummies(train.Sex).iloc[:, 1:].head()


# add a prefix to identify the source of the dummy variables
pd.get_dummies(train.Sex, prefix='Sex').iloc[:, 1:].head()

# use 'get_dummies' with a feature that has 3 possible values
pd.get_dummies(train.Embarked, prefix='Embarked').head(10)

# save the DataFrame of dummy variables and concatenate them to the original DataFrame
embarked_dummies = pd.get_dummies(train.Embarked, prefix='Embarked').iloc[:, 0:]
train = pd.concat([train, embarked_dummies], axis=1)
train.head()

How to work with Date and Time values in Pandas
-----------------------------------------------
Ex 38)
import pandas as pd


# read a dataset of UFO reports into a DataFrame
ufo = pd.read_csv('ufo.csv')

ufo.head()


# 'Time' is currently stored as a string
ufo.dtypes


# convert 'Time' to datetime format
ufo['Time'] = pd.to_datetime(ufo.Time)

ufo.head()

ufo.dtypes

# convenient Series attributes are now available
ufo.Time.dt.hour.head()

ufo.Time.dt.weekday_name.head()

ufo.Time.dt.dayofyear.head()


# convert a single string to datetime format (outputs a timestamp object)
ts = pd.to_datetime('1/1/1999')
ts

# compare a datetime Series with a timestamp
ufo.loc[ufo.Time >= ts, :].head()

# perform mathematical operations with timestamps (outputs a timedelta object)
ufo.Time.max() - ufo.Time.min()

# timedelta objects also have attributes you can access
(ufo.Time.max() - ufo.Time.min()).days


# allow plots to appear in the notebook
%matplotlib inline


# count the number of UFO reports per year
ufo['Year'] = ufo.Time.dt.year
ufo.Year.value_counts().sort_index().head()


# plot the number of UFO reports per year (line plot is the default)
ufo.Year.value_counts().sort_index().plot()

How do I find and remove duplicate rows in pandas?
---------------------------------------------------

Ex 39) user_cols = ['user_id', 'age', 'gender', 'occupation', 'zip_code']

users = pd.read_table('movieusers.csv', sep='|', header=None, names=user_cols, index_col='user_id')

users.head()

users.shape


# detect duplicate zip codes: True if an item is identical to a previous item

users.zip_code.duplicated().tail()


# count the duplicate items (True becomes 1, False becomes 0)
users.zip_code.duplicated().sum()

# detect duplicate DataFrame rows: True if an entire row is identical to a previous row

users.duplicated().tail()

# count the duplicate rows
users.duplicated().sum()

Logic for duplicated:
----------------------
keep='first' (default): Mark duplicates as True except for the first occurrence.

keep='last': Mark duplicates as True except for the last occurrence.

keep=False: Mark all duplicates as True.


# examine the duplicate rows (ignoring the first occurrence)
users.loc[users.duplicated(keep='first'), :]


# examine the duplicate rows (ignoring the last occurrence)
users.loc[users.duplicated(keep='last'), :]


# examine the duplicate rows (including all duplicates)
users.loc[users.duplicated(keep=False), :]


# drop the duplicate rows (inplace=False by default)
users.drop_duplicates(keep='first').shape


users.drop_duplicates(keep='last').shape


users.drop_duplicates(keep=False).shape


# only consider a subset of columns when identifying duplicates
users.duplicated(subset=['age', 'zip_code']).sum()

users.drop_duplicates(subset=['age', 'zip_code']).shape

































