Nested Functions
----------------
We can declare a function inside another function,such
type of functions are called Nested Functions.

ex 1)
def outter():
    print("outter function is executing")
    def inner():
        print("inner function is executing")
    print("outter function is calling inner function")
    return inner

f1 = outter()
f1()
f1()

ex 2)
def f1():
    def inner(a,b):
        print("The sum:",a+b)
        print("The Product:",a*b)
    inner(10,20)
    inner(10,20)

in the above example inner() function is local to outer()
function and hence it is not possible to call directly 
from outside of outer() function.

Note:- A function can return another function.

Function Decorators
-------------------
Decorator is a function which can take a function as argument
and extend its functionality and returns modified function
with extended functionality.

The main objective of decorator functions is we can extend
the functionality of existing functions without modifies 
that function.

ex 3)
def f1(name):
	print("Hello",name,"Good Morning")

This function can always print same output for any name.

f1('kalyan')
f1('sunil')
f1('krishna')

But we want to modify this function to provide different
message if the name is 'Kumar'.

we can do this without touching f1() function is decorator.

ex 4) def decor(func):
	def inner(name):
		if name == 'kumar':
			print("Hello kumar we are in hyd")
		else:
			func(name)
	return inner

     @decor
     def f1(name):
	print("Hello",name,"we are in Python class")

in the above program whenever we call f1() function automatically decor function will be executed.

ex 5) def sdivison(func):
	def inner(a,b):
		print("We are dividing",a,"with",b)
		if b==0:
			print("OOPS...cannot divide")
		else:
			return func(a,b)
	retun inner
	
	@sdivison
	def divison(a,b):
		return a/b

Decorator Chaining
------------------
We can define multiple decorators for the same function and
all these decorators will form decorator chaining.

ex 6) @decor1
      @decor
      def f2():

for f2() function we are applying 2 decorator functions.
First inner decorator will work and outter decorator.

ex 7)
def decor1(func):
	def inner():
		x = func()
		return x*x
	return inner

def decor(func):
	def inner():
		x= func()
		return 2*x
	return inner

@decor1
@decor
def f2():
	return 10

print(f2())

ex 8)
def decor(func):
	def inner(name):
		print("First Decor(decor) function execution")
		func(name)
	return inner

def decor1(func):
	def inner(name):
		print("Second Decor(decor1) execution")
		func(name)
	return inner

@decor1
@decor
def f3(name):
	print("Hello",name,"we are in GVIPL")

Python Iterators
-----------------
What are iterators in Python?
Iterators are everywhere in Python. They are elegantly implemented within for loops, comprehensions, generators etc. but hidden in plain sight.

Iterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time.

Technically speaking, Python iterator object must implement two special methods, __iter__() and __next__(), collectively called the iterator protocol.

An object is called iterable if we can get an iterator from it. Most of built-in containers in Python like: list, tuple, string etc. are iterables.

The iter() function (which in turn calls the __iter__() method) returns an iterator from them.

Iterating Through an Iterator in Python
---------------------------------------
We use the next() function to manually iterate through all the items of an iterator. When we reach the end and there is no more data to be returned, it will raise StopIteration. Following is an example.

ex 1)
my_list =[4,7,0,3]

my_iter = iter(my_list)
print(next(my_iter))
print(next(my_iter))
print(next(my_iter))
print(next(my_iter))
print(next(my_iter))

ex 2)
my_list = [4,7,0,3]
for item in my_list:
    print(item)

Building Your Own Iterator in Python
------------------------------------
Building an iterator from scratch is easy in Python. We just have to implement the methods __iter__() and __next__().

The __iter__() method returns the iterator object itself. If required, some initialization can be performed.

The __next__() method must return the next item in the sequence. On reaching the end, and in subsequent calls, it must raise StopIteration.

Here, we show an example that will give us next power of 2 in each iteration. Power exponent starts from zero up to a user set number.

ex 3)
class PowTow:
    
    def __init__(self, max = 0):
        self.max = max
        
    def __iter__(self):
        self.n = 0
        return self
    
    def __next__(self):
        if self.n <= self.max:
            result = 2 ** self.n
            self.n += 1
            return result
        else:
            raise StopIteration
            
a = PowTow(4)
i = iter(a)
print(next(i))
print(next(i))
print(next(i))
print(next(i))
print(next(i))
print(next(i))

The advantage of using iterators is that they save resources. Like shown above, we could get all the odd numbers without storing the entire number system in memory. We can have infinite items (theoretically) in finite memory.

Python Generators
-----------------
What are generators in Python?

There is a lot of overhead in building an iterator in Python; we have to implement a class with __iter__() and __next__() method, keep track of internal states, raise StopIteration when there was no values to be returned etc.

This is both lengthy and counter intuitive. Generator comes into rescue in such situations.

Python generators are a simple way of creating iterators. All the overhead we mentioned above are automatically handled by generators in Python.

Simply speaking, a generator is a function that returns an object (iterator) which we can iterate over (one value at a time).

How to create a generator in Python?

It is fairly simple to create a generator in Python. It is as easy as defining a normal function with yield statement instead of a return statement.

If a function contains at least one yield statement (it may contain other yield or return statements), it becomes a generator function. Both yield and return will return some value from a function.

The difference is that, while a return statement terminates a function entirely, yield statement pauses the function saving all its states and later continues from there on successive calls.

Differences between Generator function and a Normal function
------------------------------------------------------------
Here is how a generator function differs from a normal function.

Generator function contains one or more yield statement.
When called, it returns an object (iterator) but does not start execution immediately.

Methods like __iter__() and __next__() are implemented automatically. So we can iterate through the items using next().
Once the function yields, the function is paused and the control is transferred to the caller.

Local variables and their states are remembered between successive calls.

Finally, when the function terminates, StopIteration is raised automatically on further calls.

Here is an example to illustrate all of the points stated above. We have a generator function named my_gen() with several yield statements.

ex 1)
def my_gen():
    n=1
    print("This is printed first")
    yield n
    
    n+=1
    print("This is printed second")
    yield n
    
    n+=1
    print("This is printed last")
    yield n
    
a = my_gen()
next(a)
next(a)
next(a) 
next(a)

One interesting thing to note in the above example is that, the value of variable n is remembered between each call.

Unlike normal functions, the local variables are not destroyed when the function yields. Furthermore, the generator object can be iterated only once.

To restart the process we need to create another generator object using something like a = my_gen().

ex 2)
def my_gen():
    n = 1
    print('This is printed first')
    # Generator function contains yield statements
    yield n

    n += 1
    print('This is printed second')
    yield n

    n += 1
    print('This is printed at last')
    yield n

# Using for loop
for item in my_gen():
    print(item)

Python Generator Expression
---------------------------
Simple generators can be easily created on the fly using generator expressions. It makes building generators easy.

Same as lambda function creates an anonymous function, generator expression creates an anonymous generator function.

The syntax for generator expression is similar to that of a list comprehension in Python. But the square brackets are replaced with round parentheses.

The major difference between a list comprehension and a generator expression is that while list comprehension produces the entire list, generator expression produces one item at a time.

They are kind of lazy, producing items only when asked for. For this reason, a generator expression is much more memory efficient than an equivalent list comprehension.

ex 3)
# Initialize the list
my_list = [1, 3, 6, 10]

# square each term using list comprehension
# Output: [1, 9, 36, 100]
[x**2 for x in my_list]

# same thing can be done using generator expression
# Output: <generator object <genexpr> at 0x0000000002EBDAF8>
(x**2 for x in my_list)

ex 4)
my_list = [1, 3, 6, 10]

a = (x**2 for x in my_list)
# Output: 1
print(next(a))

# Output: 9
print(next(a))

# Output: 36
print(next(a))

# Output: 100
print(next(a))

# Output: StopIteration
next(a)

Why generators are used in Python?
-----------------------------------
There are several reasons which make generators an attractive implementation to go for.

1. Easy to Implement

Generators can be implemented in a clear and concise way as compared to their iterator class counterpart. Following is an example to implement a sequence of power of 2's using iterator class.

class PowTwo:
    def __init__(self, max = 0):
        self.max = max

    def __iter__(self):
        self.n = 0
        return self

    def __next__(self):
        if self.n > self.max:
            raise StopIteration

        result = 2 ** self.n
        self.n += 1
        return result

This was lengthy. Now lets do the same using a generator function.

def PowTwoGen(max = 0):
    n = 0
    while n < max:
        yield 2 ** n
        n += 1

2. Memory Efficient

A normal function to return a sequence will create the entire sequence in memory before returning the result. This is an overkill if the number of items in the sequence is very large.

Generator implementation of such sequence is memory friendly and is preferred since it only produces one item at a time.

3. Represent Infinite Stream

Generators are excellent medium to represent an infinite stream of data. Infinite streams cannot be stored in memory and since generators produce only one item at a time, it can represent infinite stream of data.

def all_even():
    n = 0
    while True:
        yield n
        n += 2

4. Pipelining Generators

Generators can be used to pipeline a series of operations. This is best illustrated using an example.

Suppose we have a log file from a famous fast food chain. The log file has a column (4th column) that keeps track of the number of pizza sold every hour and we want to sum it to find the total pizzas sold in 5 years.

Assume everything is in string and numbers that are not available are marked as 'N/A'. A generator implementation of this could be as follows.

with open('sells.log') as file:
    pizza_col = (line[3] for line in file)
    per_hour = (int(x) for x in pizza_col if x != 'N/A')
    print("Total pizzas sold = ",sum(per_hour))









Modules in Python
-----------------
A group of functions,variables and classes saved to a file,which is nothing but a module.

Every python file(.py)acts as a module.

Ex 1) testm1.py

x = 100

def add(a,b):
	print("The Sum:",a+b)

def product(a,b):
	print("The Product:",a*b)


import testm1

print(testm1.x)
testm1.add(100,200)
testm1.add(10,20)

Renaming a module at the time of import(module aliasing):
---------------------------------------------------------

Ex 2) import testm1 as t

Note:- here testm1 is original module name and t is alias name.
we can access members by using alias name 't'.

import testm1 as t

print(t.x)
t.add(100,200)
t.add(10,20)

from..import
------------
We can import particular members of module by using 
from..import.The main advantage of this is we can access
members directly without using module name.

ex 3)
from testm1 import x,add

print(x)
add(10,20)
product(10,20)

we can import all members of module as follows
from testm1 import *

ex 4)
from testm1 import *

print(x)
add(10,20)
product(10,20)

Various Possibilites of import
------------------------------
1) import modulename
2) import module1,module2,module2
3) import module1 as m
4) import module1 as m1,module2 as m2,module3 as m3
5) from module import member
6) from module import member1,member2,member3
7) from module import member1 as x
8) from module import *

member aliasing:
----------------
ex 5)
from testm1 import x as y,add as sum

print(y)
sum(10,20)

once we defined as alias name,we should use alias name only and we should not use original name.

from testm1 import x as y

print(x) //Name Error:'x' is not defined.


Reloading a Module:
-------------------
By default module will be loaded only once eventhough we are
importing multiple times.

ex 6) 

import testm1
import testm1
import testm1

print(x)

ex 7) 

x = 200

def add(a,b):
	print("The Sum:",a+b)

def product(a,b):
	print("The Product:",a*b)

import imp
imp.reload(testm1)

testm1.x

Finding members of module by using dir() function:
--------------------------------------------------
Python provides inbuilt function dir() to list out all members of current module or a specified module.

1) dir() ==> To list out all members of current module.
2) dir(moduleName) ==> To list out all members of specified
                       module.


ex 8)
x = 10
y = 20
def f1():
    print("Hello")
print(dir())

ex 9)
x = 200

def add(a,b):
	print("The Sum:",a+b)

def product(a,b):
	print("The Product:",a*b)

import testm1
print(dir(testm1))

Note:- For every module at the time of execution python inter
preter will add some special properties automatically for
internal use.

__name__ variable:
------------------
For every python program,a special variable __name__ will be
added internally.This variable stores information regarding
whether the program is executed as an individual program or
as a module.

if the program executed as an individual program then the 
value of this variable is __main__.

if the program executed as a module from some other program
then the value of this variable is the name of module
where its defined.

Hence by using this __name__ variable we can identify 
whether the program executed directly or as a module.

 








